{
  "hash": "3a29f96d98af4d5fb104b83120f31be7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Gumble Softmax: Differentiable Sampling from Discrete Distributions\"\ndate: \"2024-12-23\"\nauthor: \"Abhyuday\"\nexecute:\n  echo: false\n  enabled: true\n\nengine: jupyter\ncategories: [code]\n---\n\n\n\n\n# What is Discrete Sampling\n\nDiscrete sampling refers to the process of selecting value of a random variable over a given discrete probability distribution *p*.\n\n$$\np = [p_1, p_2, ..., p_n] \\quad where \\quad \\sum_{i=1}^n p_i = 1\n$$\n\nFor example, $p = [0.6, 0.3, 0.1]$ is a categorical distribution over three classes,\n\n-   We can select first class with probability: $P(X=1) = 0.6$ \\quad i.e. 60%\n\n-   We can select second class with probability: $P(X=2) = 0.3$ \\quad i.e. 30%\n\n-   We can select third class with probability: $P(X=3) = 0.1$ \\quad i.e. 10%\n\nIn practice, Sampling process is usually performed using:\n\n1.  `argmax` selecting the value with highest probability. e.g. inference on a multi-class classifier.\n\n2.  `np.random.choice` selecting a random item with corresponding probability. e.g. a RL agent exploring the discrete action space.\n\n# Problem with Discrete Sampling\n\nSampling methods mentioned in the previous section provide options for both exploration (during data collection) and exploitation (during inference) of the distribution space.\n\nBut, what if sampling is required during training phase e.g sampling vectors from a codebook while training a VQVAE or in tasks like reinforcement learning or generative modeling, where sampling is necessary to explore different actions or outputs.\n\nWell, the training stage requires all the intermediary operations to be differentiable, for the mighty *Backpropagation*. Let's analyze the differentiability of sampling options available to us:\n\n1.  `argmax` being a discontinuous function everywhere, i.e. $\\quad\\lim_{h\\to0}f(x+h) \\neq \\lim_{h\\to0}f(x+h) \\neq f(x)$ is clearly not differentiable.\n2.  random selection methods like `np.random.choice` are also non-differentiable.\n\nNow that we have a clear picture of the problem, lets build up to the Gumble Softmax and find out how it overcomes the impediment of non-differentiability.\n\n# Gumble Softmax\n\nBefore jumping directly into the mathematical equations and derivations\n\n\n\n```{ojs}\nfunction gumbelSoftmax(logits, tau) {\n  const gumbelNoise = logits.map(() => -Math.log(-Math.log(Math.random())));\n  const softmax = logits.map((logit, index) => (logit + gumbelNoise[index]) / tau);\n  return softmax;\n}\n\n// Random logits for visualization\nconst logits = Array.from({length: 10}, () => Math.random()); // 10 categories with random logits\n\n// Function to update the plot\nfunction updatePlot(tau) {\n  const softmaxValues = gumbelSoftmax(logits, tau);\n\n  return Plotly.newPlot(\"plot\", [{\n    x: Array.from({length: logits.length}, (_, i) => `Cat ${i}`),\n    y: softmaxValues,\n    type: \"bar\",\n    marker: {color: 'blue'},\n  }], {\n    title: `Gumbel-Softmax Distribution (tau = ${tau.toFixed(2)})`,\n    xaxis: {title: 'Category'},\n    yaxis: {title: 'Probability'},\n  });\n}\nslider = html`<input type=\"range\" min=\"0.1\" max=\"5\" step=\"0.1\" value=\"1\" style=\"width: 100%;\" />`\nslider.addEventListener('input', () => {\n  const tau = parseFloat(slider.value);\n  updatePlot(tau);\n});\n\n// Initial plot with tau = 1.0\nupdatePlot(1.0);\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}