---
title: "Gumble Softmax: Differentiable Sampling from Discrete Distributions"
date: "2024-12-23"
author: "Abhyuday"
execute:
  echo: false
categories: [code]
---

# What is Discrete Sampling

Discrete sampling refers to the process of selecting value of a random variable over a given discrete probability distribution *p*.

$$
p = [p_1, p_2, ..., p_n] \quad where \quad \sum_{i=1}^n p_i = 1
$$

For example, $p = [0.6, 0.3, 0.1]$ is a categorical distribution over three classes,

-   We can select first class with probability: $P(X=1) = 0.6$ \quad i.e. 60%

-   We can select second class with probability: $P(X=2) = 0.3$ \quad i.e. 30%

-   We can select third class with probability: $P(X=3) = 0.1$ \quad i.e. 10%

In practice, Sampling process is usually performed using:

1.  `argmax` selecting the value with highest probability. e.g. inference on a multi-class classifier.

2.  `np.random.choice` selecting a random item with corresponding probability. e.g. a RL agent exploring the discrete action space.

# Problem with Discrete Sampling

Sampling methods mentioned in the previous section provide options for both exploration (during data collection) and exploitation (during inference) of the distribution space.

But, what if sampling is required during training phase e.g sampling vectors from a codebook while training a VQVAE or in tasks like reinforcement learning or generative modeling, where sampling is necessary to explore different actions or outputs.

Well, the training stage requires all the intermediary operations to be differentiable, for the mighty *Backpropagation*. Let's analyze the differentiability of sampling options available to us:

1.  `argmax` being a discontinuous function everywhere, i.e. $\quad\lim_{h\to0}f(x+h) \neq \lim_{h\to0}f(x+h) \neq f(x)$ is clearly not differentiable.
2.  random selection methods like `np.random.choice` are also non-differentiable.

Now that we have a clear picture of the problem, lets build up to the Gumble Softmax and find out how it overcomes the impediment of non-differentiability.

# Gumble Softmax

As mentioned in the previous section, we need a differentiable solution for argmax-styled determinism and stochastic nature of random selection to maintain the exploration & exploitation.

We'll now discuss the proposed two-fold solution:

### Softmax with temperature

The *softmax with temperature* modifies the output probabilities of a categorical distribution by scaling the logits $z$ with a temperature parameter $\tau$:

$$
\text{softmax}(z_i, \tau) = \frac{e^{z_i/\tau}}{\sum_{j=1}^{n} e^{z_j/\tau}}
$$

-   ***High Temperature (***$\tau \to \infty$***)***: Makes probabilities more uniform

-   ***Low Temperature (***$\tau \to 0$***)***: Sharpens the probability, approximation of one-hot vector


```{ojs}

function softmax(logits, temp){
  let sum=0
  for (let index = 0; index < logits.length; index++) {
    sum+= Math.exp((logits[index] + 1e-8)/temp)
  }
  let probs = logits.map(x=> Math.exp((x + 1e-8)/temp)/sum)
  return probs
}
prob = Array.from({length: 5}, ()=>Math.random()*10)
viewof gain = Inputs.range([0.1, 50], {value: 20, step: 0.1, label: "Temperature (Ï„)   "})
Plot.barY(softmax(prob, gain)
 ).plot({x: {label: "Categories"}, y: {label: "Probs"}})
```